{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "enhanced-components",
  "type": "registry:block",
  "title": "Enhanced Components",
  "description": "Clean, enhanced UI components for Atlas-ERP.",
  "files": [
    {
      "path": "src/components/ui/enhanced-card.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface EnhancedCardProps extends React.ComponentProps<typeof Card> {\n  interactive?: boolean;\n  hoverEffect?: \"lift\" | \"shadow\" | \"border\" | \"none\";\n  children: React.ReactNode;\n}\n\n/**\n * EnhancedCard - A clean, standardized card component with subtle hover effects\n *\n * This component wraps the shadcn Card component and adds optional hover effects:\n * - Hover lift effect\n * - Shadow effect\n * - Border highlight effect\n *\n * @example\n * <EnhancedCard interactive hoverEffect=\"lift\">\n *   <CardHeader>\n *     <CardTitle>Card Title</CardTitle>\n *     <CardDescription>Card Description</CardDescription>\n *   </CardHeader>\n *   <CardContent>\n *     Card Content\n *   </CardContent>\n *   <CardFooter>\n *     Card Footer\n *   </CardFooter>\n * </EnhancedCard>\n */\nexport function EnhancedCard({\n  className,\n  interactive = false,\n  hoverEffect = \"none\",\n  children,\n  ...props\n}: EnhancedCardProps) {\n  // Determine the hover effect classes\n  const hoverClasses = interactive\n    ? {\n        lift: \"transition-all duration-200 hover:-translate-y-1 hover:shadow-md\",\n        shadow: \"transition-all duration-200 hover:shadow-lg\",\n        border: \"transition-all duration-200 hover:border-primary/50\",\n        none: \"\",\n      }[hoverEffect]\n    : \"\";\n\n  return (\n    <Card\n      className={cn(\n        hoverClasses,\n        interactive && \"cursor-pointer\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Card>\n  );\n}\n\n// Export the original Card components for convenience\nexport { CardContent, CardDescription, CardFooter, CardHeader, CardTitle };\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/ui/enhanced-button.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button, ButtonProps } from \"@/components/ui/button\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nconst enhancedButtonVariants = cva(\n  \"relative overflow-hidden transition-all\",\n  {\n    variants: {\n      effect: {\n        none: \"\",\n        shadow: \"hover:shadow-md\",\n      },\n    },\n    defaultVariants: {\n      effect: \"none\",\n    },\n  }\n);\n\ninterface EnhancedButtonProps\n  extends ButtonProps,\n    VariantProps<typeof enhancedButtonVariants> {\n  asChild?: boolean;\n}\n\n/**\n * EnhancedButton - A clean, standardized button component\n *\n * This component wraps the shadcn Button component with minimal enhancements\n * for a clean, professional look.\n *\n * @example\n * <EnhancedButton effect=\"shadow\">\n *   Click me\n * </EnhancedButton>\n */\nconst EnhancedButton = React.forwardRef<HTMLButtonElement, EnhancedButtonProps>(\n  ({\n    className,\n    effect,\n    variant = \"default\",\n    size = \"default\",\n    asChild = false,\n    ...props\n  }, ref) => {\n    const Comp = asChild ? Slot : Button;\n\n    return (\n      <Comp\n        ref={ref}\n        variant={variant}\n        size={size}\n        className={cn(\n          enhancedButtonVariants({ effect }),\n          className\n        )}\n        {...props}\n      />\n    );\n  }\n);\n\nEnhancedButton.displayName = \"EnhancedButton\";\n\nexport { EnhancedButton };\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/ui/enhanced-container.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { Card } from \"@/components/ui/card\";\n\nconst containerVariants = cva(\n  \"relative overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background\",\n        primary: \"bg-primary/5\",\n        secondary: \"bg-secondary/5\",\n        accent: \"bg-accent/5\",\n        destructive: \"bg-destructive/5\",\n        card: \"bg-card\",\n        muted: \"bg-muted\",\n      },\n      rounded: {\n        none: \"rounded-none\",\n        sm: \"rounded-sm\",\n        md: \"rounded-md\",\n        lg: \"rounded-lg\",\n        xl: \"rounded-xl\",\n        \"2xl\": \"rounded-2xl\",\n        full: \"rounded-full\",\n      },\n      shadow: {\n        none: \"shadow-none\",\n        sm: \"shadow-sm\",\n        md: \"shadow\",\n        lg: \"shadow-md\",\n        xl: \"shadow-lg\",\n      },\n      border: {\n        none: \"border-0\",\n        thin: \"border\",\n        medium: \"border-2\",\n        thick: \"border-4\",\n      },\n      borderColor: {\n        default: \"border-border\",\n        primary: \"border-primary/50\",\n        secondary: \"border-secondary/50\",\n        accent: \"border-accent/50\",\n        destructive: \"border-destructive/50\",\n      },\n      hover: {\n        none: \"\",\n        lift: \"transition-transform duration-200 hover:-translate-y-1\",\n        scale: \"transition-transform duration-200 hover:scale-[1.02]\",\n        shadow: \"transition-shadow duration-200 hover:shadow-lg\",\n        border: \"transition-colors duration-200 hover:border-primary/50\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      rounded: \"lg\",\n      shadow: \"md\",\n      border: \"thin\",\n      borderColor: \"default\",\n      hover: \"none\",\n    },\n  }\n);\n\ninterface EnhancedContainerProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof containerVariants> {\n  children: React.ReactNode;\n  asCard?: boolean;\n}\n\n/**\n * EnhancedContainer - A versatile container component\n * \n * This component provides a clean, customizable container with various styling options.\n * It can be used as a standalone container or as a Card component.\n * \n * @example\n * <EnhancedContainer variant=\"primary\" rounded=\"xl\" shadow=\"lg\" hover=\"lift\">\n *   <div>Content</div>\n * </EnhancedContainer>\n */\nexport function EnhancedContainer({\n  children,\n  className,\n  variant,\n  rounded,\n  shadow,\n  border,\n  borderColor,\n  hover,\n  asCard = false,\n  ...props\n}: EnhancedContainerProps) {\n  const containerClasses = cn(\n    containerVariants({ variant, rounded, shadow, border, borderColor, hover }),\n    className\n  );\n\n  if (asCard) {\n    return (\n      <Card className={containerClasses} {...props}>\n        {children}\n      </Card>\n    );\n  }\n\n  return (\n    <div className={containerClasses} {...props}>\n      {children}\n    </div>\n  );\n}\n\n// For backward compatibility with MagicCard\ninterface MagicCardProps {\n  children?: React.ReactNode;\n  className?: string;\n  gradientSize?: number;\n  gradientColor?: string;\n  gradientOpacity?: number;\n  gradientFrom?: string;\n  gradientTo?: string;\n  focus?: boolean;\n  glare?: boolean;\n  glareSize?: number;\n  glareOpacity?: number;\n  glarePosition?: \"top\" | \"bottom\" | \"left\" | \"right\" | \"all\";\n  glareColor?: string;\n  glareBorderRadius?: string;\n  disabled?: boolean;\n}\n\nexport function MagicCard({\n  children,\n  className,\n  focus,\n  disabled,\n  ...props\n}: MagicCardProps) {\n  return (\n    <EnhancedContainer\n      variant=\"card\"\n      rounded=\"xl\"\n      shadow=\"md\"\n      hover={focus ? \"lift\" : \"none\"}\n      className={cn(\n        className,\n        disabled && \"opacity-70 pointer-events-none\"\n      )}\n      {...props}\n    >\n      {children}\n    </EnhancedContainer>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/ui/enhanced-action-button.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { EnhancedButton } from \"@/components/ui/enhanced-button\";\n\nconst actionButtonVariants = cva(\n  \"relative font-medium transition-all\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/90\",\n        accent: \"bg-accent text-accent-foreground hover:bg-accent/90\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        sm: \"h-8 px-3 text-xs rounded-md\",\n        md: \"h-9 px-4 py-2 text-sm rounded-md\",\n        lg: \"h-10 px-6 py-2 text-base rounded-md\",\n        xl: \"h-12 px-8 py-3 text-lg rounded-md\",\n      },\n      rounded: {\n        none: \"rounded-none\",\n        sm: \"rounded-sm\",\n        md: \"rounded-md\",\n        lg: \"rounded-lg\",\n        xl: \"rounded-xl\",\n        full: \"rounded-full\",\n      },\n      shadow: {\n        none: \"shadow-none\",\n        sm: \"shadow-sm\",\n        md: \"shadow\",\n        lg: \"shadow-md\",\n        xl: \"shadow-lg\",\n      },\n      hover: {\n        none: \"\",\n        lift: \"hover:-translate-y-1\",\n        scale: \"hover:scale-105\",\n        shadow: \"hover:shadow-lg\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"md\",\n      rounded: \"md\",\n      shadow: \"sm\",\n      hover: \"none\",\n    },\n  }\n);\n\ninterface EnhancedActionButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof actionButtonVariants> {\n  icon?: React.ReactNode;\n  iconPosition?: \"left\" | \"right\";\n}\n\n/**\n * EnhancedActionButton - A versatile button component\n * \n * This component provides a clean, customizable button with various styling options.\n * It can include an icon on either side of the text.\n * \n * @example\n * <EnhancedActionButton \n *   variant=\"primary\" \n *   size=\"lg\" \n *   rounded=\"full\" \n *   shadow=\"lg\" \n *   hover=\"lift\"\n *   icon={<PlusIcon />}\n * >\n *   Create New\n * </EnhancedActionButton>\n */\nexport function EnhancedActionButton({\n  children,\n  className,\n  variant,\n  size,\n  rounded,\n  shadow,\n  hover,\n  icon,\n  iconPosition = \"left\",\n  ...props\n}: EnhancedActionButtonProps) {\n  return (\n    <button\n      className={cn(\n        actionButtonVariants({ variant, size, rounded, shadow, hover }),\n        \"inline-flex items-center justify-center gap-2 transition-all\",\n        className\n      )}\n      {...props}\n    >\n      {icon && iconPosition === \"left\" && (\n        <span className=\"flex-shrink-0\">{icon}</span>\n      )}\n      {children}\n      {icon && iconPosition === \"right\" && (\n        <span className=\"flex-shrink-0\">{icon}</span>\n      )}\n    </button>\n  );\n}\n\n// For backward compatibility with ShimmerButton\ninterface ShimmerButtonProps extends React.ComponentPropsWithoutRef<\"button\"> {\n  shimmerColor?: string;\n  shimmerSize?: string;\n  borderRadius?: string;\n  shimmerDuration?: string;\n  background?: string;\n  className?: string;\n  children?: React.ReactNode;\n}\n\nexport function ShimmerButton({\n  children,\n  className,\n  borderRadius,\n  ...props\n}: ShimmerButtonProps) {\n  // Apply inline style for borderRadius if provided (for backward compatibility)\n  const style = borderRadius ? { borderRadius } : undefined;\n\n  return (\n    <EnhancedActionButton\n      variant=\"default\"\n      size=\"md\"\n      shadow=\"md\"\n      hover=\"lift\"\n      className={className}\n      style={style}\n      {...props}\n    >\n      {children}\n    </EnhancedActionButton>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}