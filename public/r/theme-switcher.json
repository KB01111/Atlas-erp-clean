{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "theme-switcher",
  "type": "registry:block",
  "title": "Theme Switcher",
  "description": "A theme switcher component with system, light, and dark mode options.",
  "files": [
    {
      "path": "registry/new-york/components/theme-switcher.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useTheme } from \"next-themes\";\nimport { Moon, Sun, Monitor } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ThemeSwitcherProps {\n  className?: string;\n  iconClassName?: string;\n  variant?: \"default\" | \"outline\" | \"ghost\";\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\";\n}\n\nexport function ThemeSwitcher({\n  className,\n  iconClassName,\n  variant = \"outline\",\n  size = \"icon\",\n}: ThemeSwitcherProps) {\n  const { theme, setTheme } = useTheme();\n  const [mounted, setMounted] = React.useState(false);\n\n  // Ensure component is mounted to avoid hydration mismatch\n  React.useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  if (!mounted) {\n    return (\n      <Button\n        variant={variant}\n        size={size}\n        className={cn(\"relative\", className)}\n        disabled\n      >\n        <Sun className={cn(\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all\", iconClassName)} />\n      </Button>\n    );\n  }\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant={variant}\n          size={size}\n          className={cn(\"relative\", className)}\n        >\n          <Sun\n            className={cn(\n              \"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all\",\n              theme !== \"dark\" && theme !== \"light\" ? \"opacity-100\" : \"opacity-0\",\n              iconClassName\n            )}\n          />\n          <Moon\n            className={cn(\n              \"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all\",\n              theme === \"dark\" ? \"rotate-0 scale-100 opacity-100\" : \"opacity-0\",\n              iconClassName\n            )}\n          />\n          <Monitor\n            className={cn(\n              \"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all\",\n              theme === \"light\" ? \"rotate-0 scale-100 opacity-100\" : \"opacity-0\",\n              iconClassName\n            )}\n          />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setTheme(\"light\")}>\n          <Monitor className=\"mr-2 h-4 w-4\" />\n          <span>Light</span>\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"dark\")}>\n          <Moon className=\"mr-2 h-4 w-4\" />\n          <span>Dark</span>\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"system\")}>\n          <Sun className=\"mr-2 h-4 w-4\" />\n          <span>System</span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}